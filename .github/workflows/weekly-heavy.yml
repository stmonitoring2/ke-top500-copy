name: Weekly Rebuild (Top 500 ranking)

on:
  schedule:
    # Weekly, Mondays at 09:30 UTC
    - cron: "30 9 * * 1"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ke-top500-weekly
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  rebuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      # --- Python (build ranking CSV) ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build Top 500 ranking (Python) – try discovery, else fallback
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          set -e
          python scripts/build_ke_top500.py --out public/top500_ranked.csv --max_new 1500 --discover true || \
          python scripts/build_ke_top500.py --out public/top500_ranked.csv --discover false
          echo "---- public/top500_ranked.csv (head) ----"
          head -n 5 public/top500_ranked.csv || true

      - name: Convert to channels.csv
        run: |
          python scripts/make_channels_csv.py --ranked public/top500_ranked.csv --out channels.csv
          echo "---- channels.csv (head) ----"
          head -n 5 channels.csv || true

      # --- Node (daily JSON + history + rollups) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # no cache key here; avoids lockfile requirement

      - name: Install Node deps
        run: |
          set -e
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Ensure public/data folder
        run: mkdir -p public/data

      - name: Refresh latest videos (Hybrid:RSS + API fallback)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          node scripts/fetch_latest_top500_hybrid.mjs ./channels.csv ./public/data/top500.json
          echo "---- public/data after daily snapshot ----"
          ls -lah public/data || true
          echo "size top500.json:" && (wc -c public/data/top500.json || true)

      - name: Append history snapshot
        run: node scripts/append_history.mjs

      - name: Build 7d & 30d rollups
        run: |
          node scripts/make_rollups_from_history.mjs 7  public/data/top500_7d.json
          node scripts/make_rollups_from_history.mjs 30 public/data/top500_30d.json
          echo "---- public/data after rollups ----"
          ls -lah public/data || true
          echo "sizes:" && (wc -c public/data/top500.json public/data/top500_7d.json public/data/top500_30d.json || true)

      # --- Commit & push ---
      - name: Commit updated artifacts (commit → rebase → push)
        run: |
          set -e
          git config user.name "auto-bot"
          git config user.email "bot@example.com"

          git add \
            public/top500_ranked.csv \
            channels.csv \
            public/data/top500.json \
            public/data/history.jsonl \
            public/data/top500_7d.json \
            public/data/top500_30d.json || true

          git status --porcelain
          git commit -m "chore: weekly rebuild + refresh + history + rollups [skip ci]" || echo "No changes"

          git fetch origin main
          git pull --rebase --autostash origin main || {
            git stash push -u -m "bot-stash" || true
            git pull --rebase origin main
            git stash pop || true
          }

          # Push back to THIS repo (avoids 403 on forks/copies)
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git push origin HEAD:main

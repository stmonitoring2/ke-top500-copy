name: Weekly Rebuild (Top 500 ranking)

on:
  schedule:
    # Weekly, Mondays at 09:30 UTC
    - cron: "30 9 * * 1"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ke-top500-weekly
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  rebuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      # --- Python (build ranking CSV) ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Try full discovery build (per scoring formula). If it fails, the next step runs.
      - name: Build Top 500 (discovery mode)
        id: discovery
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          set -e
          python scripts/build_ke_top500.py --out public/top500_ranked.csv --discover true --max_new 1500
          echo "ok=true" >> $GITHUB_OUTPUT
          echo "---- public/top500_ranked.csv (head) ----"
          head -n 10 public/top500_ranked.csv || true

      # If discovery failed, fall back to non-discovery (seed-only) build
      - name: Fallback ranking (no discovery)
        if: ${{ failure() }}
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          set -e
          echo "Discovery failed — building from known channels only"
          python scripts/build_ke_top500.py --out public/top500_ranked.csv --discover false
          echo "---- public/top500_ranked.csv (head) ----"
          head -n 10 public/top500_ranked.csv || true

      # Ensure we at least have a ranking CSV; seed if missing/empty
      - name: Ensure ranking exists (or seed from seed_channel_ids.txt)
        run: |
          set -e
          mkdir -p public
          if [ ! -s public/top500_ranked.csv ] || [ "$(wc -l < public/top500_ranked.csv)" -le 1 ]; then
            echo "Ranking missing/empty — seeding from seed_channel_ids.txt"
            SEED_FILE=""
            if   [ -f scripts/seed_channel_ids.txt ]; then SEED_FILE="scripts/seed_channel_ids.txt"
            elif [ -f seed_channel_ids.txt ]; then       SEED_FILE="seed_channel_ids.txt"
            else
              echo "ERROR: No seed_channel_ids.txt found (scripts/ or repo root)."; exit 2
            fi
            awk 'BEGIN{print "rank,channel_id,channel_name"} {print NR "," $1 ",Seed Channel " NR}' "$SEED_FILE" > public/top500_ranked.csv
          fi
          echo "---- public/top500_ranked.csv (after ensure) ----"
          head -n 20 public/top500_ranked.csv
          echo "Lines: $(wc -l < public/top500_ranked.csv)"

      - name: Convert to channels.csv (ranked ∪ seeds)
        run: |
          set -e
          bash scripts/make_channels_from_ranked_and_seeds.sh public/top500_ranked.csv

      - name: Preflight:verify channels.csv has rows
        run: |
          set -e
          if [ ! -s channels.csv ] || [ "$(wc -l < channels.csv)" -le 1 ]; then
            echo "No channels found in channels.csv — cannot proceed."
            exit 3
          fi

      # --- Node (daily JSON + history + rollups) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node deps
        run: |
          set -e
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Ensure public/data folder
        run: mkdir -p public/data

      - name: Refresh latest videos (Hybrid:RSS + API fallback)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
          DAILY_FALLBACK_ALLOW_UNKNOWN: "true"
          DAILY_FALLBACK_MAX_AGE_DAYS: "14"
        run: |
          node scripts/fetch_latest_top500_hybrid.mjs ./channels.csv ./public/data/top500.json
          echo "---- public/data after daily snapshot ----"
          ls -lah public/data || true
          echo "size top500.json:" && (wc -c public/data/top500.json || true)

      - name: Append history snapshot
        run: node scripts/append_history.mjs

      - name: Build 7d & 30d rollups (RSS + optional API scoring)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          node scripts/make_rollups_from_channels.mjs 7  public/data/top500_7d.json
          node scripts/make_rollups_from_channels.mjs 30 public/data/top500_30d.json
          echo "---- public/data after rollups ----"
          ls -lah public/data || true
          echo "sizes:" && (wc -c public/data/top500.json public/data/top500_7d.json public/data/top500_30d.json || true)

      # --- Commit & push ---
      - name: Commit updated artifacts (commit → rebase → push)
        run: |
          set -e
          git config user.name "auto-bot"
          git config user.email "bot@example.com"

          git add \
            public/top500_ranked.csv \
            channels.csv \
            public/data/top500.json \
            public/data/history.jsonl \
            public/data/top500_7d.json \
            public/data/top500_30d.json || true

          git status --porcelain
          git commit -m "chore: weekly rebuild + refresh + history + rollups [skip ci]" || echo "No changes"

          git fetch origin main
          git pull --rebase --autostash origin main || {
            git stash push -u -m "bot-stash" || true
            git pull --rebase origin main
            git stash pop || true
          }

          # Push back to THIS repo
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git push origin HEAD:main

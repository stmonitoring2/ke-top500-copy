name: Daily Refresh (RSS, history, rollups)

on:
  schedule:
    - cron: "30 0 * * *"   # 00:30 UTC daily (≈ 03:30 EAT)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ke-top500-daily
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  refresh:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node deps
        run: |
          set -e
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Using npm ci"
            npm ci
          else
            echo "No npm lockfile found -> using npm install"
            npm install
          fi

      - name: Ensure channels.csv (ranked ∪ seeds)
        run: |
          set -e
          mkdir -p public
          if [ ! -f public/top500_ranked.csv ] && [ -f top500_ranked.csv ]; then
            cp top500_ranked.csv public/top500_ranked.csv
          fi
          bash scripts/make_channels_from_ranked_and_seeds.sh public/top500_ranked.csv

      - name: Ensure public/data folder
        run: mkdir -p public/data

      - name: Refresh latest videos (Hybrid:RSS + API fallback)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
          DAILY_FALLBACK_ALLOW_UNKNOWN: "true"
          DAILY_FALLBACK_MAX_AGE_DAYS: "14"
        run: |
          set -e
          node scripts/fetch_latest_top500_hybrid.mjs ./channels.csv ./public/data/top500.json
          echo "---- public/data after daily snapshot ----"
          ls -lah public/data || true
          echo "size top500.json:" && (wc -c public/data/top500.json || true)
          echo "items in top500.json:" && (jq '.items | length' public/data/top500.json || echo "jq not installed")

      - name: Patch ranked CSV from daily JSON (for Daily UI)
        run: |
          set -e
          node scripts/patch_ranked_from_daily.mjs
          echo "---- ranked (head) ----"
          head -n 5 public/top500_ranked.csv || true
          echo "---- sample latest columns (first non-header) ----"
          awk -F, 'NR==2{print "latest_video_id=" $11 ", duration=" $14 ", published=" $13 ", url=" $4 }' public/top500_ranked.csv

      - name: Append history snapshot
        run: node scripts/append_history.mjs

      - name: Build 7d & 30d rollups (RSS + optional API scoring)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}
        run: |
          node scripts/make_rollups_from_channels.mjs 7  public/data/top500_7d.json
          node scripts/make_rollups_from_channels.mjs 30 public/data/top500_30d.json
          echo "---- public/data after rollups ----"
          ls -lah public/data || true
          echo "sizes:" && (wc -c public/data/top500.json public/data/top500_7d.json public/data/top500_30d.json || true)

      - name: Commit updated artifacts (commit → rebase → push)
        run: |
          set -e
          git config user.name "auto-bot"
          git config user.email "bot@example.com"
          git add \
            channels.csv \
            public/top500_ranked.csv \
            public/data/top500.json \
            public/data/history.jsonl \
            public/data/top500_7d.json \
            public/data/top500_30d.json || true
          git commit -m "chore: daily refresh + patch ranked from daily + history + rollups [skip ci]" || echo "No changes"
          git fetch origin main
          git pull --rebase --autostash origin main || {
            git stash push -u -m "bot-stash" || true
            git pull --rebase origin main
            git stash pop || true
          }
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git push origin HEAD:main
